/*
 * This file is generated by jOOQ.
 */
package com.liubomyr.voucher.database.schema.tables;


import com.liubomyr.voucher.database.schema.Keys;
import com.liubomyr.voucher.database.schema.VoucherAgency;
import com.liubomyr.voucher.database.schema.tables.records.TypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Type extends TableImpl<TypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>voucher_agency.type</code>
     */
    public static final Type TYPE = new Type();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeRecord> getRecordType() {
        return TypeRecord.class;
    }

    /**
     * The column <code>voucher_agency.type.TYPE_ID</code>.
     */
    public final TableField<TypeRecord, Integer> TYPE_ID = createField(DSL.name("TYPE_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>voucher_agency.type.NAME</code>.
     */
    public final TableField<TypeRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(20), this, "");

    private Type(Name alias, Table<TypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Type(Name alias, Table<TypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>voucher_agency.type</code> table reference
     */
    public Type(String alias) {
        this(DSL.name(alias), TYPE);
    }

    /**
     * Create an aliased <code>voucher_agency.type</code> table reference
     */
    public Type(Name alias) {
        this(alias, TYPE);
    }

    /**
     * Create a <code>voucher_agency.type</code> table reference
     */
    public Type() {
        this(DSL.name("type"), null);
    }

    public <O extends Record> Type(Table<O> child, ForeignKey<O, TypeRecord> key) {
        super(child, key, TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : VoucherAgency.VOUCHER_AGENCY;
    }

    @Override
    public Identity<TypeRecord, Integer> getIdentity() {
        return (Identity<TypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TypeRecord> getPrimaryKey() {
        return Keys.KEY_TYPE_PRIMARY;
    }

    @Override
    public Type as(String alias) {
        return new Type(DSL.name(alias), this);
    }

    @Override
    public Type as(Name alias) {
        return new Type(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Type rename(String name) {
        return new Type(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Type rename(Name name) {
        return new Type(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
